{"ast":null,"code":"var _jsxFileName = \"/Users/jefry/Desktop/Henry/Clases/M2/Integration/integration_6B/rick_and_morty/Front/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\n/* import Card from \"./components/Card.jsx\"; */\nimport Nav from \"./components/Nav\";\nimport Cards from \"./components/Cards.jsx\";\nimport About from \"./components/About.jsx\";\nimport Detail from \"./components/Detail\";\nimport Favorites from \"./components/Favorites\";\nimport Form from \"./components/Form.jsx\";\n\n// 24) traer el useEffet\nimport React, { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\n\n//  1) Con el hook useLocation voy a lograr que loggin sea la pag de intro y le navbar aparesca solo en la demás\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [characters, setCharacters] = useState([]);\n\n  //23) llamamos a useNavigate y lo iportamos arriba\n\n  const navigate = useNavigate();\n  // Agrego el hook useLocation.\n  const location = useLocation();\n\n  // 20 porque perdí la cuenta) crear un estado access. Inicia en false por que es un booleano\n  const [access, setAccess] = useState(false);\n\n  // 21)\n  const username = \"nombre@gmail.com\";\n  const password = \"A1perro\";\n\n  // 22) Esta funcíon tiene que preguntar si lo que se esta recibiendo por parametro es igual a lo que se tiene\n  const login = userData => {\n    if (userData.username === username && userData.password === password) {\n      setAccess(true);\n      navigate(\"/home\");\n    }\n  };\n\n  //25 ) Recibe 2 parametros, el primero es una calback y el segundo es un array\n  // Este useEffect lo estoy usando para simular una simulación de seguridad.\n  // Basicamente estoy diciendo que si el useState es false navegeu a \"/\". de lo contrarío haría la función login de arriba\n  // y navegaría al home\n  //A la hr del té no va a hacer nada la pagina se refesca pero mantiene los datos llenados incorrectametne aún en la casilla\n  useEffect(() => {\n    !access && navigate(\"/\");\n  }, [access]);\n\n  /*  Si le hicieramos un console.log() podríamos ver en al consola que useLocation es un objeto donde lo \n  que más me va  aimportar es el pathname. Asi es como vamos a poder hacer un \n  *renderezado condicional.\n  */\n  function onSearch(character) {\n    //Antes lo teniamos así:\n    /*     fetch(`https://rickandmortyapi.com/api/character/${character}`) */\n\n    /*     fetch(`http://localhost:3001/rickandmorty/character/${character}`) */\n    fetch(`https://rickandmortyapi.com/api/character/${character}`).then(response => response.json()).then(data => {\n      if (data.name) {\n        setCharacters(oldChars => [...oldChars, data]);\n      } else {\n        window.alert(\"No hay personajes con ese ID\");\n      }\n    });\n  }\n  const onClose = id => {\n    setCharacters(characters.filter(character => character.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      padding: \"25px\"\n    },\n    children: [location.pathname === \"/login\" ? /*#__PURE__*/_jsxDEV(Form, {\n      login: login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"home\",\n        element: /*#__PURE__*/_jsxDEV(Cards, {\n          onClose: onClose,\n          characters: characters\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"detail/:detailId\",\n        element: /*#__PURE__*/_jsxDEV(Detail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/favorites\",\n        element: /*#__PURE__*/_jsxDEV(Favorites, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8cLXvagRgoHmyMMB977QxPOBx+4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Nav","Cards","About","Detail","Favorites","Form","React","useState","useEffect","Routes","Route","useLocation","useNavigate","App","characters","setCharacters","navigate","location","access","setAccess","username","password","login","userData","onSearch","character","fetch","then","response","json","data","name","oldChars","window","alert","onClose","id","filter","padding","pathname"],"sources":["/Users/jefry/Desktop/Henry/Clases/M2/Integration/integration_6B/rick_and_morty/Front/src/App.js"],"sourcesContent":["import \"./App.css\";\n/* import Card from \"./components/Card.jsx\"; */\nimport Nav from \"./components/Nav\";\nimport Cards from \"./components/Cards.jsx\";\nimport About from \"./components/About.jsx\";\nimport Detail from \"./components/Detail\";\nimport Favorites from \"./components/Favorites\";\nimport Form from \"./components/Form.jsx\";\n\n// 24) traer el useEffet\nimport React, { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport { useNavigate } from \"react-router-dom\";\n\n//  1) Con el hook useLocation voy a lograr que loggin sea la pag de intro y le navbar aparesca solo en la demás\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n\n  //23) llamamos a useNavigate y lo iportamos arriba\n\n  const navigate = useNavigate();\n  // Agrego el hook useLocation.\n  const location = useLocation();\n\n  // 20 porque perdí la cuenta) crear un estado access. Inicia en false por que es un booleano\n  const [access, setAccess] = useState(false);\n\n  // 21)\n  const username = \"nombre@gmail.com\";\n  const password = \"A1perro\";\n\n  // 22) Esta funcíon tiene que preguntar si lo que se esta recibiendo por parametro es igual a lo que se tiene\n  const login = (userData) => {\n    if (userData.username === username && userData.password === password) {\n      setAccess(true);\n      navigate(\"/home\");\n    }\n  };\n\n  //25 ) Recibe 2 parametros, el primero es una calback y el segundo es un array\n  // Este useEffect lo estoy usando para simular una simulación de seguridad.\n  // Basicamente estoy diciendo que si el useState es false navegeu a \"/\". de lo contrarío haría la función login de arriba\n  // y navegaría al home\n  //A la hr del té no va a hacer nada la pagina se refesca pero mantiene los datos llenados incorrectametne aún en la casilla\n  useEffect(() => {\n    !access && navigate(\"/\");\n  }, [access]);\n\n  /*  Si le hicieramos un console.log() podríamos ver en al consola que useLocation es un objeto donde lo \n que más me va  aimportar es el pathname. Asi es como vamos a poder hacer un \n *renderezado condicional.\n */\n  function onSearch(character) {\n    //Antes lo teniamos así:\n    /*     fetch(`https://rickandmortyapi.com/api/character/${character}`) */\n\n    /*     fetch(`http://localhost:3001/rickandmorty/character/${character}`) */\n    fetch(`https://rickandmortyapi.com/api/character/${character}`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.name) {\n          setCharacters((oldChars) => [...oldChars, data]);\n        } else {\n          window.alert(\"No hay personajes con ese ID\");\n        }\n      });\n  }\n\n  const onClose = (id) => {\n    setCharacters(characters.filter((character) => character.id !== id));\n  };\n\n  return (\n    <div className=\"App\" style={{ padding: \"25px\" }}>\n      {/* 3) */}\n      {/* 26) Le paso la función a form */}\n      {location.pathname === \"/login\" ? (\n        <Form login={login} />\n      ) : (\n        <Nav onSearch={onSearch} />\n      )}\n      {/* Acá estoy diciendo que si el pathname es = a \"/\" entonces , (que sería \"?\") yo voy a mostar From si no mostraria a Nav */}\n      {/*   <Nav onSearch={onSearch} /> */}\n      <Routes>\n        <Route\n          path=\"home\"\n          element={<Cards onClose={onClose} characters={characters} />}\n        />\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"detail/:detailId\" element={<Detail />} />\n        <Route path=\"/favorites\" element={<Favorites />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}